from ..data import Query, Response
from ..prompts import get_partial_response

single_instance_rate_max_score = 5

PROMPT_PAIRWISE_COMPARISON="""You are a helpful assistant in evaluating the quality of the outputs for a given instruction. Your goal is to select the best output for the given instruction.
                
Select the Output (a) or Output (b) that is better for the given instruction. The two outputs are generated by two different AI chatbots respectively.
Do NOT provide any explanation for your choice.
Do NOT say both / neither are good.
You should answer using ONLY “Output (a)” or “Output (b)”. Do NOT output any other words.
Here are some rules of the evaluation:
(1) You should prioritize evaluating whether the output honestly/precisely/closely executes the instruction, then consider its helpfulness, accuracy, level of detail, harmlessness, etc.
(2) Outputs should NOT contain more/less than what the instruction asks for, as such outputs do NOT precisely execute the instruction.
(3) You should avoid any potential bias and your judgment should be as objective as possible. For example, the order in which the outputs were presented should NOT affect your judgment, as Output (a) and Output (b) are **equally likely** to be the better.{partial_response_note}

# Instruction:
{query_text}
# Output (a):
{response_A}
# Output (b):
{response_B}
# Which is better, Output (a) or Output (b)? Your response should be either “Output (a)” or “Output (b)”:"""

def parse_pairwise_judgment(judge_output, return_critique):
    if return_critique:
        raise Exception('This judge cannot generate critiques')
    if '(a)' in judge_output:
        return 0
    elif '(b)' in judge_output:
        return 1
    else:
        return None


def render_pairwise_prompt(query: Query, response0: Response, response1: Response, partial_response=False):
    prompt = PROMPT_PAIRWISE_COMPARISON.format(query_text=query.content, response_A=response0.content, response_B=response1.content,
                                              partial_response_note=get_partial_response(partial_response))

    return [dict(role='user', content=prompt)]